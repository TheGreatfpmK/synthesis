
dtmc

// 1 | x x   
// 0 | x x   
// y ______
//   x 0 1 


// agent1 can go in this direction
formula u1 = y1<1;
formula r1 = x1<1;
formula d1 = y1>0;
formula l1 = x1>0;

// updates of coordinates (if possible)
formula y1u = u1 ? (y1+1) : y1;
formula x1r = r1 ? (x1+1) : x1;
formula y1d = d1 ? (y1-1) : y1;
formula x1l = l1 ? (x1-1) : x1;


// agent2 can go in this direction
formula u2 = y2<1;
formula r2 = x2<1;
formula d2 = y2>0;
formula l2 = x2>0;

// updates of coordinates (if possible)
formula y2u = u2 ? (y2+1) : y2;
formula x2r = r2 ? (x2+1) : x2;
formula y2d = d2 ? (y2-1) : y2;
formula x2l = l2 ? (x2-1) : x2;


const double sl=0.1;

// agent 1 holes
hole int M1_0_0 in {0,1,2};
hole int M1_0_1 in {0,1,2};
hole int M1_1_0 in {0,1,2};
hole int M1_1_1 in {0,1,2};
hole int M1_2_0 in {0,1,2};
hole int M1_2_1 in {0,1,2};
hole int M1_3_0 in {0,1,2};
hole int M1_3_1 in {0,1,2};
hole int M1_4_0 in {0,1,2};
hole int M1_4_1 in {0,1,2};

hole int P1_0_0 in {1,2,3,4,5};
hole int P1_0_1 in {1,2,3,4,5};
hole int P1_1_0 in {1,2,3,4,5};
hole int P1_1_1 in {1,2,3,4,5};
hole int P1_2_0 in {1,2,3,4,5};
hole int P1_2_1 in {1,2,3,4,5};
hole int P1_3_0 in {1};
hole int P1_3_1 in {1};
hole int P1_4_0 in {1};
hole int P1_4_1 in {1};


// agent 2 holes
hole int M2_0_0 in {0,1,2};
hole int M2_0_1 in {0,1,2};
hole int M2_1_0 in {0,1,2};
hole int M2_1_1 in {0,1,2};
hole int M2_2_0 in {0,1,2};
hole int M2_2_1 in {0,1,2};
hole int M2_3_0 in {0,1,2};
hole int M2_3_1 in {0,1,2};

hole int P2_0_0 in {1,2,3,4,5};
hole int P2_0_1 in {1,2,3,4,5};
hole int P2_1_0 in {1,2,3,4,5};
hole int P2_1_1 in {1,2,3,4,5};
hole int P2_2_0 in {1,2,3,4,5};
hole int P2_2_1 in {1,2,3,4,5};
hole int P2_3_0 in {1};
hole int P2_3_1 in {1};


module strategy1
	mem1 : [0..3] init 0;

    [move] mem1=0 & !l1 -> (mem1'=M1_0_0);
	[move] mem1=0 & l1  -> (mem1'=M1_0_1);
	[move] mem1=1 & !l1 -> (mem1'=M1_1_0);
	[move] mem1=1 & l1  -> (mem1'=M1_1_1);
	[move] mem1=2 & !l1 -> (mem1'=M1_2_0);
	[move] mem1=2 & l1  -> (mem1'=M1_2_1);
	[move] mem1=3 & !l1 -> (mem1'=M1_3_0);
	[move] mem1=3 & l1  -> (mem1'=M1_3_1);
	[move] mem1=4 & !l1 -> (mem1'=M1_4_0);
	[move] mem1=4 & l1  -> (mem1'=M1_4_1);


endmodule


module grid1

	x1 : [0..1] init 0; // agent1 x coordinate
	y1 : [0..1] init 0; // agent1 y coordinate

	[move] mem1=0 & !l1 & P1_0_0=1 -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=0 & !l1 & P1_0_0=2 -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=0 & !l1 & P1_0_0=3 -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=0 & !l1 & P1_0_0=4 -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=0 & !l1 & P1_0_0=5 -> true;

	[move] mem1=0 & l1 & P1_0_1=1  -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=0 & l1 & P1_0_1=2  -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=0 & l1 & P1_0_1=3  -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=0 & l1 & P1_0_1=4  -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=0 & l1 & P1_0_1=5  -> true;

	[move] mem1=1 & !l1 & P1_1_0=1 -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=1 & !l1 & P1_1_0=2 -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=1 & !l1 & P1_1_0=3 -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=1 & !l1 & P1_1_0=4 -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=1 & !l1 & P1_1_0=5 -> true;
	
	[move] mem1=1 & l1 & P1_1_1=1  -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=1 & l1 & P1_1_1=2  -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=1 & l1 & P1_1_1=3  -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=1 & l1 & P1_1_1=4  -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=1 & l1 & P1_1_1=5  -> true;

	[move] mem1=2 & !l1 & P1_2_0=1 -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=2 & !l1 & P1_2_0=2 -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=2 & !l1 & P1_2_0=3 -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=2 & !l1 & P1_2_0=4 -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=2 & !l1 & P1_2_0=5 -> true;
	
	[move] mem1=2 & l1 & P1_2_1=1  -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=2 & l1 & P1_2_1=2  -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=2 & l1 & P1_2_1=3  -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=2 & l1 & P1_2_1=4  -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=2 & l1 & P1_2_1=5  -> true;

	[move] mem1=3 & !l1 & P1_3_0=1 -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=3 & !l1 & P1_3_0=2 -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=3 & !l1 & P1_3_0=3 -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=3 & !l1 & P1_3_0=4 -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=3 & !l1 & P1_3_0=5 -> true;
	
	[move] mem1=3 & l1 & P1_3_1=1  -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=3 & l1 & P1_3_1=2  -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=3 & l1 & P1_3_1=3  -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=3 & l1 & P1_3_1=4  -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=3 & l1 & P1_3_1=5  -> true;

	[move] mem1=4 & !l1 & P1_4_0=1 -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=4 & !l1 & P1_4_0=2 -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=4 & !l1 & P1_4_0=3 -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=4 & !l1 & P1_4_0=4 -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=4 & !l1 & P1_4_0=5 -> true;
	
	[move] mem1=4 & l1 & P1_4_1=1  -> 0.6: (y1'=y1u) + 0.1: true + 0.1: (x1'=x1r) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=4 & l1 & P1_4_1=2  -> 0.6: (x1'=x1r) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (y1'=y1d) + 0.1: (x1'=x1l);
	[move] mem1=4 & l1 & P1_4_1=3  -> 0.6: (y1'=y1d) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (x1'=x1l);
	[move] mem1=4 & l1 & P1_4_1=4  -> 0.6: (x1'=x1l) + 0.1: true + 0.1: (y1'=y1u) + 0.1: (x1'=x1r) + 0.1: (y1'=y1d);
	[move] mem1=4 & l1 & P1_4_1=5  -> true;
endmodule


module strategy2
	mem2 : [0..3] init 0;

    [move] mem2=0 & !l2 -> (mem2'=M2_0_0);
	[move] mem2=0 & l2  -> (mem2'=M2_0_1);
	[move] mem2=1 & !l2 -> (mem2'=M2_1_0);
	[move] mem2=1 & l2  -> (mem2'=M2_1_1);
	[move] mem2=2 & !l2 -> (mem2'=M2_2_0);
	[move] mem2=2 & l2  -> (mem2'=M2_2_1);
	[move] mem2=3 & !l2 -> (mem2'=M2_3_0);
	[move] mem2=3 & l2  -> (mem2'=M2_3_1);

endmodule


module grid2

	x2 : [0..1] init 1; // agent2 x coordinate
	y2 : [0..1] init 1; // agent2 y coordinate

	[move] mem2=0 & !l2 & P2_0_0=1 -> 0.6: (y2'=y2u) + 0.1: true + 0.1: (x2'=x2r) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=0 & !l2 & P2_0_0=2 -> 0.6: (x2'=x2r) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=0 & !l2 & P2_0_0=3 -> 0.6: (y2'=y2d) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (x2'=x2l);
	[move] mem2=0 & !l2 & P2_0_0=4 -> 0.6: (x2'=x2l) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (y2'=y2d);
	[move] mem2=0 & !l2 & P2_0_0=5 -> true;

	[move] mem2=0 & l2 & P2_0_1=1  -> 0.6: (y2'=y2u) + 0.1: true + 0.1: (x2'=x2r) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=0 & l2 & P2_0_1=2  -> 0.6: (x2'=x2r) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=0 & l2 & P2_0_1=3  -> 0.6: (y2'=y2d) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (x2'=x2l);
	[move] mem2=0 & l2 & P2_0_1=4  -> 0.6: (x2'=x2l) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (y2'=y2d);
	[move] mem2=0 & l2 & P2_0_1=5  -> true;

	[move] mem2=1 & !l2 & P2_1_0=1 -> 0.6: (y2'=y2u) + 0.1: true + 0.1: (x2'=x2r) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=1 & !l2 & P2_1_0=2 -> 0.6: (x2'=x2r) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=1 & !l2 & P2_1_0=3 -> 0.6: (y2'=y2d) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (x2'=x2l);
	[move] mem2=1 & !l2 & P2_1_0=4 -> 0.6: (x2'=x2l) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (y2'=y2d);
	[move] mem2=1 & !l2 & P2_1_0=5 -> true;
	
	[move] mem2=1 & l2 & P2_1_1=1  -> 0.6: (y2'=y2u) + 0.1: true + 0.1: (x2'=x2r) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=1 & l2 & P2_1_1=2  -> 0.6: (x2'=x2r) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=1 & l2 & P2_1_1=3  -> 0.6: (y2'=y2d) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (x2'=x2l);
	[move] mem2=1 & l2 & P2_1_1=4  -> 0.6: (x2'=x2l) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (y2'=y2d);
	[move] mem2=1 & l2 & P2_1_1=5  -> true;

	[move] mem2=2 & !l2 & P2_2_0=1 -> 0.6: (y2'=y2u) + 0.1: true + 0.1: (x2'=x2r) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=2 & !l2 & P2_2_0=2 -> 0.6: (x2'=x2r) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=2 & !l2 & P2_2_0=3 -> 0.6: (y2'=y2d) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (x2'=x2l);
	[move] mem2=2 & !l2 & P2_2_0=4 -> 0.6: (x2'=x2l) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (y2'=y2d);
	[move] mem2=2 & !l2 & P2_2_0=5 -> true;
	
	[move] mem2=2 & l2 & P2_2_1=1  -> 0.6: (y2'=y2u) + 0.1: true + 0.1: (x2'=x2r) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=2 & l2 & P2_2_1=2  -> 0.6: (x2'=x2r) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=2 & l2 & P2_2_1=3  -> 0.6: (y2'=y2d) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (x2'=x2l);
	[move] mem2=2 & l2 & P2_2_1=4  -> 0.6: (x2'=x2l) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (y2'=y2d);
	[move] mem2=2 & l2 & P2_2_1=5  -> true;

	[move] mem2=3 & !l2 & P2_3_0=1 -> 0.6: (y2'=y2u) + 0.1: true + 0.1: (x2'=x2r) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=3 & !l2 & P2_3_0=2 -> 0.6: (x2'=x2r) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=3 & !l2 & P2_3_0=3 -> 0.6: (y2'=y2d) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (x2'=x2l);
	[move] mem2=3 & !l2 & P2_3_0=4 -> 0.6: (x2'=x2l) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (y2'=y2d);
	[move] mem2=3 & !l2 & P2_3_0=5 -> true;
	
	[move] mem2=3 & l2 & P2_3_1=1  -> 0.6: (y2'=y2u) + 0.1: true + 0.1: (x2'=x2r) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=3 & l2 & P2_3_1=2  -> 0.6: (x2'=x2r) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (y2'=y2d) + 0.1: (x2'=x2l);
	[move] mem2=3 & l2 & P2_3_1=3  -> 0.6: (y2'=y2d) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (x2'=x2l);
	[move] mem2=3 & l2 & P2_3_1=4  -> 0.6: (x2'=x2l) + 0.1: true + 0.1: (y2'=y2u) + 0.1: (x2'=x2r) + 0.1: (y2'=y2d);
	[move] mem2=3 & l2 & P2_3_1=5  -> true;
endmodule


module counter

    c : [0..100] init 0;

    [move] true -> (c'=min(c+1,10));

endmodule

const double d = 0.9;

module discount

	s : bool init false;

	[move] !s -> 1-d : (s'=true) + d : true;

endmodule


// reward
rewards "moves"
	true: 1;
endrewards

rewards "meet"
    (x1=x2) & (y1=y2) : 1;
endrewards

// target
label "goal" = c=3;
label "dgoal" = s;
label "mgoal" = (x1=x2) & (y1=y2);

